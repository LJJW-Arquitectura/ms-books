#Test with: http://editor.swagger.io/

swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for Books
  description: Java + MySQL
  license:
    name: Software Architecture 2018-II
host: 192.168.0.10:3002
basePath: /books-ms
schemes:
  - http
consumes:
  - application/json
  - multipart/form-data
produces:
  - application/json
paths:
  /books:
    post:
      summary: Creates a new book
      operationId: createBook
      parameters:
        - name: book
          in: body
          required: true
          description: Book Object
          schema:
            $ref: '#/definitions/BookInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Book'
        '500':
          description: Internal Server Error
    get:
      summary: Returns all books
      operationId: findAllBooks
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/BooksList'
        '500':
          description: Internal Server Error

  /books/title/{book_title}:
    get:
      summary: Returns books with the given title
      operationId: findBookByTitle
      parameters:
        - name: book_title
          in: path
          description: The title of the book to be returned
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/BooksList'
        '500':
          description: Internal Server Error
          
  /books/{book_id}:
    get:
      summary: Returns a book with the given id
      operationId: findBookById
      parameters:
        - name: book_id
          in: path
          description: The id of the book to be returned
          required: true
          type: number
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Book'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    put:
      summary: Updates a book with the given id
      operationId: updateBook
      parameters:
        - name: book_id
          in: path
          description: The id of the Book to be updated
          required: true
          type: number
        - name: Book
          in: body
          required: true
          description: Book Object
          schema:
            $ref: '#/definitions/BookInput'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Book'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      summary: Deletes a book with the given id
      operationId: deleteBook
      parameters:
        - name: book_id
          in: path
          description: The id of the book to be deleted
          required: true
          type: number
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  
  /file/download/{file_id}:
    get: 
      summary: Download file with the given id
      operationId: downloadFile
      parameters:
        - name: file_id
          in: path
          description: The id of the book
          required: true
          type: number
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          
  /file/book/{book_id}:
    post: 
      summary: Uploads cover of a book with given id 
      operationId: uploadBookCover
      parameters:
        - name: book_id
          in: path
          description: The id of the book
          required: true
          type: number
        - name: file
          in: formData
          description: cover to upload
          required: true
          type: file
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/File'
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
  
    put: 
      summary: Updates cover of a book with given id 
      operationId: updateBookCover
      parameters:
        - name: book_id
          in: path
          description: The id of the book
          required: true
          type: number
        - name: file
          in: formData
          description: cover to upload
          required: true
          type: file
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/File'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  
    delete: 
      summary: Deletes cover of a book with given id 
      operationId: deleteBookCover
      parameters:
        - name: book_id
          in: path
          description: The id of the book
          required: true
          type: number
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          
definitions:

  # Files
  File:
    type: object
    properties:
      fileName:
        type: string
      fileType:
        type: string
      fileDownloadUri:
        type: string
      size:
        type: number  
  
  # Books
  Book:
    type: object
    properties:
      id:
        type: number
      publisher:
        type: string
      title:
        type: string
      numPages:
        type: number
      isbn:
        type: string
      plot:
        type: string
      authors:
        type: array
        items:
          type: string
      genres:
        type: array
        items:
          type: string
      cover:
        $ref: '#/definitions/File'
      
  BookInput:
    type: object
    properties:
      title:
        type: string
      publisher:
        type: string
      numPages:
        type: number
      isbn:
        type: string
      plot:
        type: string
      authors:
        type: array
        items:
          type: string
      genres:
        type: array
        items:
          type: string

  BooksList:
    type: object
    required:
      - list
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/Book'
